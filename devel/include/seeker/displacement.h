// Generated by gencpp from file seeker/displacement.msg
// DO NOT EDIT!


#ifndef SEEKER_MESSAGE_DISPLACEMENT_H
#define SEEKER_MESSAGE_DISPLACEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace seeker
{
template <class ContainerAllocator>
struct displacement_
{
  typedef displacement_<ContainerAllocator> Type;

  displacement_()
    : displacementMessage()  {
    }
  displacement_(const ContainerAllocator& _alloc)
    : displacementMessage(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _displacementMessage_type;
  _displacementMessage_type displacementMessage;




  typedef boost::shared_ptr< ::seeker::displacement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seeker::displacement_<ContainerAllocator> const> ConstPtr;

}; // struct displacement_

typedef ::seeker::displacement_<std::allocator<void> > displacement;

typedef boost::shared_ptr< ::seeker::displacement > displacementPtr;
typedef boost::shared_ptr< ::seeker::displacement const> displacementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::seeker::displacement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::seeker::displacement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace seeker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'seeker': ['/home/user/catkin_ws/src/seeker/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::seeker::displacement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seeker::displacement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seeker::displacement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seeker::displacement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seeker::displacement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seeker::displacement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::seeker::displacement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32f65ba4fdf766c71719d0c45327361d";
  }

  static const char* value(const ::seeker::displacement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32f65ba4fdf766c7ULL;
  static const uint64_t static_value2 = 0x1719d0c45327361dULL;
};

template<class ContainerAllocator>
struct DataType< ::seeker::displacement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seeker/displacement";
  }

  static const char* value(const ::seeker::displacement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::seeker::displacement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 displacementMessage\n\
#float64 x\n\
#float64 y\n\
#float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::seeker::displacement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::seeker::displacement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.displacementMessage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct displacement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seeker::displacement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::seeker::displacement_<ContainerAllocator>& v)
  {
    s << indent << "displacementMessage: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.displacementMessage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEEKER_MESSAGE_DISPLACEMENT_H
